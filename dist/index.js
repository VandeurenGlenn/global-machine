"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),global.globals||(global.globals=new Map);const globals=global.globals,set=(e,s)=>{globals.set(e,s)},get=e=>globals.get(e),remove=e=>{globals.delete(e)},increase=e=>{const s=globals.get(e);globals.set(e,s++)},decrease=e=>{const s=globals.get(e);globals.set(e,s--)};var globals$1={set:set,get:get,remove:remove,increase:increase,decrease:decrease};class PubSub{constructor(){this.subscribers={}}subscribe(e,s,l){void 0===l&&(l=s),this.subscribers[e]=this.subscribers[e]||{handlers:[],value:null},this.subscribers[e].handlers.push(s.bind(l))}unsubscribe(e,s,l){void 0===l&&(l=s);const t=this.subscribers[e].handlers.indexOf(s.bind(l));this.subscribers[e].handlers.splice(t)}publish(e,s){this.subscribers[e]&&this.subscribers[e].value!==s&&(this.subscribers[e].handlers.forEach(l=>{l(s,this.subscribers[e].value)}),this.subscribers[e].value=s)}}const pubsub=new PubSub,events=["change","set","remove"],validEvent=(e,s=[])=>{return-1!==[...events,...s].indexOf(e)},publishEvent=(e,s,l,t)=>{pubsub.publish(`${e}.change`,{path:s,value:l,type:t}),pubsub.publish(`${e}.${t}`,{path:s,value:l})},array=(e="globalArray",s=[])=>{console.log(globals$1.get(e),e),void 0===globals$1.get(e)&&globals$1.set(e,s);return{get:s=>{if(void 0===s)return globals$1.get(e);return globals$1.get(e)[s]},set:(s,l)=>{const t=globals$1.get(e);l?t[s]=l:-1===t.indexOf(s)&&t.push(s),globals$1.set(e,t),publishEvent(e,l?s:t.indexOf(l),l,"set")},remove:s=>{const l=globals$1.get(e);"string"==typeof s&&(s=l.indexOf(s));l.slice(s,1);globals$1.set(e,l),publishEvent(e,s,void 0,"remove")},on:(s,l)=>{if(!validEvent(s))throw Error(`invalid event, expected: change add or remove instead got ${s}`);pubsub.subscribe(`${e}.${s}`,l)},reduce:s=>(console.log(globals$1.get(e)),globals$1.get(e).reduce(s))}},object=(e="globalObject",s={})=>{void 0===globals$1.get(e)&&globals$1.set(e,s);return{get:s=>{if(void 0===s)return globals$1.get(e);return globals$1.get(e)[s]},set:(s,l)=>{const t=globals$1.get(e);t[s]=l,globals$1.set(e,t),publishEvent(e,s,l,"set")},remove:s=>{const l=globals$1.get(e);delete l[s],globals$1.set(e,l),publishEvent(e,s,void 0,"remove")},on:(s,l)=>{if(!validEvent(s))throw Error(`invalid event, expected: change add or remove instead got ${s}`);pubsub.subscribe(`${e}.${s}`,l)}}},boolean=(e="globalBoolean",s=!1)=>(void 0===globals$1.get(e)&&globals$1.set(e,s),{get:()=>globals$1.get(e),set:s=>{globals$1.set(e,s),publishEvent(e,e,s,"set")},remove:()=>{globals$1.delete(e),publishEvent(e,e,void 0,"remove")},on:(s,l)=>{if(!validEvent(s))throw Error(`invalid event, expected: change add or remove instead got ${s}`);pubsub.subscribe(`${e}.${s}`,l)}}),string=(e="globalString",s=null)=>(void 0===globals$1.get(e)&&globals$1.set(e,s),{get:()=>globals$1.get(e),set:s=>{globals$1.set(e,s),publishEvent(e,e,s,"set")},remove:()=>{globals$1.delete(e),publishEvent(e,e,val,"remove")},on:(s,l)=>{if(!validEvent(s))throw Error(`invalid event, expected: change add or remove instead got ${s}`);pubsub.subscribe(`${e}.${s}`,l)}}),number=(e="globalNumber",s=0)=>{void 0===globals$1.get(e)&&globals$1.set(e,s);const l=s=>{globals$1.set(e,s),publishEvent(e,e,s,"set")};return{get:()=>globals$1.get(e),set:l,remove:()=>{globals$1.delete(e),publishEvent(e,e,val,"remove")},increase:(s=1)=>l(globals$1.get(e)+s),decrease:(s=1)=>l(globals$1.get(e)-s),on:(s,l)=>{if(!validEvent(s,["increase","decrease"]))throw Error(`invalid event, expected: change add or remove instead got ${s}`);pubsub.subscribe(`${e}.${s}`,l)}}};var utils=Object.freeze({array:array,object:object,boolean:boolean,string:string,number:number});exports.utils=utils,exports.machine=globals$1;
